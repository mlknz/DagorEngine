include "shader_global.dshl"
include "psh_tangent.dshl"
include "normaldetail.dshl"
include "gbuffer.dshl"
include "static_shadow.dshl"
include "dagi_scene_common_write.dshl"
include "dagi_scene_25d_common_write.dshl"
include "dagi_volmap_common_25d.dshl"
include "giHelpers/voxelize_gs.dshl"

macro SET_WORLD_VIEW_POS()
  (ps) { world_view_pos@f3 = world_view_pos; }
  (vs) { world_view_pos@f3 = world_view_pos; }
endmacro

int scene_mode = 0;
interval scene_mode: normal<1, voxelize<2, voxelize_albedo;
int voxelize_axis;

shader sponza, simple_aces
{



  if (two_sided || scene_mode != normal)
  //if (two_sided || scene_mode == voxelize)
  {
    cull_mode = none;
  }
  if (scene_mode != normal)
  //if (two_sided || scene_mode == voxelize)
  {
    hlsl {
      #define VOXELIZE_CENTROID centroid
    }
    (vs) {voxelize_axis@f1 = (voxelize_axis);}
    if (two_sided)
    {
      (ps) { is_two_sided@f1 = (1,0,0,0); }
    } else
    {
      (ps) { is_two_sided@f1 = (0,0,0,0); }
    }
  } else
  {
    hlsl {
      #define VOXELIZE_CENTROID
    }
  }
  SET_WORLD_VIEW_POS()
  texture tex = material.texture.diffuse;
  texture normal = material.texture[2];

  if (shader == sponza)
  {
    texture spec = material.texture[4];
    texture mask = material.texture[6];
  }

  if (scene_mode != normal)
  {
    z_write = false;
    z_test = false;
  }

  if (scene_mode == voxelize)
  {
    INIT_VOXELS_HEIGHTMAP_HEIGHT_25D(ps)
    SAMPLE_INIT_VOLMAP_25D(ps)
    SAMPLE_VOLMAP_25D(ps)
    INIT_STATIC_SHADOW()
    USE_STATIC_SHADOW()
    (ps) {
      from_sun_direction@f3 = from_sun_direction;
      sun_color_0@f3 = sun_color_0;
    }
    SSGE_SCENE_COMMON_INIT_WRITE_PS()
    SSGE_SCENE_COMMON_WRITE_PS()
  }
  if (scene_mode == voxelize_albedo)
  {
    INIT_VOXELS_HEIGHTMAP_HEIGHT_25D(ps)
    SSGE_SCENE_25D_COMMON_INIT_WRITE_PS()
    SSGE_SCENE_25D_COMMON_WRITE_PS()
  }

  //blend_src = one; blend_dst = zero;
  //blend_asrc = one; blend_adst = one;   // For water reflection.
  WRITE_GBUFFER()

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 diffuseTexcoord              : TEXCOORD0;
      VOXELIZE_CENTROID float3 pointToEye          : TEXCOORD2;
      float3 normal                       : TEXCOORD5;
    };
  }

  if (scene_mode != normal)
  {
    TO_VOXELIZE_SPACE(vs)
    //INIT_VOXELIZE_GS()
    //VOXELIZE_GS(0, 1)
  }

  (ps) { diffuse_tex@static = tex; }
  if (normal != NULL)
  {
    USE_PIXEL_TANGENT_SPACE()
    (ps) { normal_tex@static = normal; }
  }
  if (shader == sponza)
  {
    if (spec != NULL)
    {
      (ps) { spec@static = spec; }
    }
    if (mask != NULL)
    {
      (ps) { mask@static = mask; }
    }
  } else
  {
    static int atest = 0;
    interval atest : atestOff < 1, atestOn;
    if (atest == atestOn)
    {
      USE_ATEST_HALF()
    }
    else
    {
      NO_ATEST()
    }
  }

  //fsh_const[3] = (atest / 255.0, 0, 0, 0);

  hlsl(ps) {
    ##if scene_mode == voxelize
      void main_ps_simple_aces(VsOutput input INPUT_VFACE)
      {
        float2 texCoord = input.diffuseTexcoord;
        half4 diffuseColor = tex2DBindless(get_diffuse_tex(), texCoord);
        ##if (shader == sponza)
          ##if (mask != NULL)
            half alpha = tex2DBindless(get_mask(), texCoord).x;
            clip(alpha-0.5);
          ##endif
        ##else
          ##if (atest == atestOn)
            clip_alpha(diffuseColor.a);
          ##endif
        ##endif


        half3 worldNormal = normalize(input.normal);
        worldNormal = get_is_two_sided() ? MUL_VFACE(worldNormal) : worldNormal;

        float3 worldPos = world_view_pos - input.pointToEye;
        float3 lightDir = -from_sun_direction;
        half3 lightColor = sun_color_0;

        float shadow = getStaticShadow(worldPos);
        //float3 voxelCenterWP = floor(worldPos/VOXEL_SIZE)*VOXEL_SIZE + 0.5*VOXEL_SIZE.xzy;
        float3 voxelCenterWP = worldPos;
        shadow += getStaticShadow(voxelCenterWP);shadow *= 0.5;

        //diffuseColor.rgb = 0.15;
        half3 ambient = 0.01;
        float ambinet25dAmount = sample_25d_volmap(worldPos, worldNormal, ambient);
        half3 litColor = diffuseColor.rgb*(lightColor*(saturate(dot(lightDir, worldNormal))*shadow + ambient));
        //half3 litColor = diffuseColor.rgb*lightColor*getStaticShadow(float4(worldPos,1));
        writeSceneVoxelDataSafe(worldPos, litColor.rgb, 1);
      }
    ##elif scene_mode == voxelize_albedo
      void main_ps_simple_aces(VsOutput input)
      {
        float2 texCoord = input.diffuseTexcoord;
        half4 diffuseColor = tex2DBindless(get_diffuse_tex(), texCoord);
        ##if (shader == sponza)
          ##if (mask != NULL)
            half alpha = tex2DBindless(get_mask(), texCoord).x;
            clip(alpha-0.5);
          ##endif
        ##else
          ##if (atest == atestOn)
            clip_alpha(diffuseColor.a);
          ##endif
        ##endif

        float3 worldPos = world_view_pos - input.pointToEye;
        writeScene25dVoxelDataSafe(worldPos, diffuseColor.rgb, 0, 0);

      }
    ##elif scene_mode == normal
      GBUFFER_OUTPUT main_ps_simple_aces(VsOutput input INPUT_VFACE)
      {
        float3 worldPos = world_view_pos - input.pointToEye;
        float2 texCoord = input.diffuseTexcoord;
        half4 diffuseColor = tex2DBindless(get_diffuse_tex(), texCoord);
        ##if (shader == sponza)
          ##if (mask != NULL)
            half alpha = tex2DBindless(get_mask(), texCoord).x;
            clip(alpha-0.5);
          ##endif
        ##else
          ##if (atest == atestOn)
            clip_alpha(diffuseColor.a);
          ##endif
        ##endif

        half3 vertexNormal = normalize(input.normal);

        half smoothness = 0;
        ##if shader == sponza
          ##if spec != NULL
            half specularMask = tex2DBindless(get_spec(), texCoord).x;
          ##else
            half specularMask = 0;
          ##endif
          smoothness = 0.5*pow8(specularMask);
        ##endif
        ##if normal != NULL
          half4 packedNormalMap = tex2DBindless(get_normal_tex(), input.diffuseTexcoord);
          ##if shader == sponza
            half3 normalMap = restore_normal(packedNormalMap.xy);
            half metallTranslucency = 0;
          ##else
            half3 normalMap = unpack_ag_normal(packedNormalMap);
            half specularMask = packedNormalMap.r;
            smoothness = pow2(specularMask);
            half metallTranslucency = packedNormalMap.b;
          ##endif
          half3 worldNormal = perturb_normal( normalMap, vertexNormal, worldPos, input.diffuseTexcoord );
        ##else
          half3 worldNormal = vertexNormal;
        ##endif

        UnpackedGbuffer gbuffer;
        init_gbuffer(gbuffer);
        ##if (two_sided)
        worldNormal = MUL_VFACE(worldNormal);
        ##endif
        //float3 worldPos = world_view_pos-input.pointToEye;
        //diffuseColor.rgb = frac(worldPos.xzz*0.1+0.01);
        init_albedo(gbuffer, diffuseColor.rgb);
        init_smoothness(gbuffer, smoothness);
        init_normal(gbuffer, worldNormal);
        half ao = 1, shadow = 1;
        ##if (!two_sided)
        {
          SET_IF_IS_BACK_FACE(ao, ao*0.125);
          SET_IF_IS_BACK_FACE(shadow, 0);
        }
        ##endif
        init_ao(gbuffer, ao);
        init_shadow(gbuffer, shadow);

        return encode_gbuffer(gbuffer, input.pointToEye);
      }
    ##endif
  }
  compile("target_ps", "main_ps_simple_aces");


  channel float3 pos=pos;
  channel color8 norm=norm unsigned_pack;
  channel float2 tc[0]=tc[0];


  (vs) { globtm@f44 = globtm; }

  if (in_editor == yes)
  {
    (vs) {
      world_local_x@f3 = world_local_x;
      world_local_y@f3 = world_local_y;
      world_local_z@f3 = world_local_z;
      world_local_pos@f3 = world_local_pos;
    }
  }


  hlsl(vs) {
    struct VsInput
    {
      float3 pos: POSITION;  // W defaults to 1.
      float3 packedNormal             : NORMAL;
      float2 diffuseTexcoord          : TEXCOORD0;
    };

    VsOutput main_vs_all_simples_aces(VsInput input)
    {
      VsOutput output;

##if in_editor == yes
      float3 worldPos = input.pos.x * world_local_x + input.pos.y * world_local_y + input.pos.z * world_local_z + world_local_pos;
##else
      float3 worldPos = input.pos;
##endif

##if in_editor == yes
      float3 normal = input.packedNormal * 2. - 1.;
      float3 worldNormal = normalize(normal.x * world_local_x + normal.y * world_local_y + normal.z * world_local_z);
##else
      float3 worldNormal = BGR_SWIZZLE(input.packedNormal) * 2. - 1.;
##endif
      ##if scene_mode == normal
      output.pos = mul(float4(input.pos,1), globtm);
      ##else
      //float3 boxPos = (((worldPos-voxelize_box0)*voxelize_box1)*2-1)*voxelize_aspect_ratio;
      float3 boxPos = worldPos*voxelize_world_to_rasterize_space_mul + voxelize_world_to_rasterize_space_add;
      int angle = voxelize_axis;
      //const float yScale = (1./(floor(float(VOXEL_RESOLUTION_X)/VOXEL_RESOLUTION_Y)));//since it's y resolution is 2x smaller
      //since we rasterize to quad it is always of a bigger size (i.e. 128x128)
      //so when we put worldY axis to x - we can safely scale it
      //unfortunately that results in incorrect clipping in rasterizing (basically in Y axis we will rasterize more pixels) but
      //* they will be discarded during actual write, so it is safe
      //* y-axis is less populated
      // ~saves us 30% on GPU (2 renders are twice faster)

      //boxPos.y *= yScale;
      output.pos.xyz = boxPos.yzx;
      if (angle == 1)
        output.pos.xyz = boxPos.xyz;
      if (angle == 2)
        output.pos.xyz = boxPos.xzy;
      //output.pos.z = output.pos.z*0.5+0.5;output.pos.w = 1;
      output.pos.zw = float2(0.5,1);
      ##endif

      output.diffuseTexcoord.xy = input.diffuseTexcoord;
      output.pointToEye = world_view_pos.xyz - worldPos.xyz;

      output.normal = worldNormal;
      return output;
    }
  }

  compile("target_vs", "main_vs_all_simples_aces");
}

shader gi_black
{


  cull_mode = none;
  SET_WORLD_VIEW_POS()
  if (scene_mode == normal)
  {
    dont_render;
  }

  if (scene_mode != normal)
  {
    z_write = false;
    z_test = false;
  }

  if (scene_mode == voxelize)
  {
    SSGE_SCENE_COMMON_INIT_WRITE_PS()
    SSGE_SCENE_COMMON_WRITE_PS()
  }
  if (scene_mode == voxelize_albedo)
  {
    INIT_VOXELS_HEIGHTMAP_HEIGHT_25D(ps)
    SSGE_SCENE_25D_COMMON_INIT_WRITE_PS()
    SSGE_SCENE_25D_COMMON_WRITE_PS()
  }


  //blend_src = one; blend_dst = zero;
  //blend_asrc = one; blend_adst = one;   // For water reflection.
  WRITE_GBUFFER()

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 worldPos                   : TEXCOORD2;
    };
  }

  hlsl(ps) {
    void main_ps_simple_aces(VsOutput input)
    {
      ##if scene_mode == voxelize_albedo
      writeScene25dVoxelDataSafe(input.worldPos,0,0,0);
      ##else
      writeSceneVoxelDataSafe(input.worldPos,0,1);
      ##endif
      //half3 litColor = diffuseColor.rgb*lightColor*getStaticShadow(float4(worldPos,1));
    }
  }
  compile("target_ps", "main_ps_simple_aces");


  channel float3 pos=pos;

  (vs) { globtm@f44 = globtm; }

  if (in_editor == yes)
  {
    (vs) {
      world_local_x@f3 = world_local_x;
      world_local_y@f3 = world_local_y;
      world_local_z@f3 = world_local_z;
      world_local_pos@f3 = world_local_pos;
    }
  }


  hlsl(vs) {
    struct VsInput
    {
      float4 pos: POSITION;  // W defaults to 1.
    };

    VsOutput main_vs_all_simples_aces(VsInput input)
    {
      VsOutput output;

##if in_editor == yes
      float4 worldPos = float4(input.pos.x * world_local_x + input.pos.y * world_local_y + input.pos.z * world_local_z + world_local_pos, 1);
##else
      float4 worldPos = input.pos;
##endif

      output.pos = mul(input.pos, globtm);

      output.worldPos = worldPos.xyz;

      return output;
    }
  }

  compile("target_vs", "main_vs_all_simples_aces");
}
